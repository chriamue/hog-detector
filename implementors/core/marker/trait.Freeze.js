(function() {var implementors = {
"hog_detector":[["impl&lt;X, Y&gt; Freeze for <a class=\"struct\" href=\"hog_detector/classifier/bayes/struct.BayesClassifier.html\" title=\"struct hog_detector::classifier::bayes::BayesClassifier\">BayesClassifier</a>&lt;X, Y&gt;",1,["hog_detector::classifier::bayes::BayesClassifier"]],["impl Freeze for <a class=\"struct\" href=\"hog_detector/dataset/struct.EyesDataSet.html\" title=\"struct hog_detector::dataset::EyesDataSet\">EyesDataSet</a>",1,["hog_detector::dataset::eyes_dataset::EyesDataSet"]],["impl Freeze for <a class=\"struct\" href=\"hog_detector/dataset/struct.MnistDataSet.html\" title=\"struct hog_detector::dataset::MnistDataSet\">MnistDataSet</a>",1,["hog_detector::dataset::mnist_dataset::MnistDataSet"]],["impl Freeze for <a class=\"struct\" href=\"hog_detector/detection_filter/struct.TrackerFilter.html\" title=\"struct hog_detector::detection_filter::TrackerFilter\">TrackerFilter</a>",1,["hog_detector::detection_filter::tracker_filter::TrackerFilter"]],["impl Freeze for <a class=\"struct\" href=\"hog_detector/feature_descriptor/struct.CombinedFeatureDescriptor.html\" title=\"struct hog_detector::feature_descriptor::CombinedFeatureDescriptor\">CombinedFeatureDescriptor</a>",1,["hog_detector::feature_descriptor::combined_feature_descriptor::CombinedFeatureDescriptor"]],["impl&lt;X, Y, C, W&gt; Freeze for <a class=\"struct\" href=\"hog_detector/hogdetector/struct.HogDetector.html\" title=\"struct hog_detector::hogdetector::HogDetector\">HogDetector</a>&lt;X, Y, C, W&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,</span>",1,["hog_detector::hogdetector::HogDetector"]]]
};if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()